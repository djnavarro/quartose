% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/class.R
\name{quarto_object}
\alias{quarto_object}
\alias{quarto_div}
\alias{quarto_span}
\alias{quarto_tabset}
\alias{quarto_section}
\alias{quarto_group}
\alias{quarto_markdown}
\title{Dynamically generate quarto syntax}
\usage{
quarto_section(title, level)

quarto_tabset(content, level, title = NULL, names = NULL)

quarto_div(content, class = NULL, sep = "")

quarto_span(content, class = NULL, sep = "")

quarto_group(content, sep = "")

quarto_markdown(content, sep = "")
}
\arguments{
\item{title}{Section title, a character string.}

\item{level}{Header level, an integer between 1 and 6.}

\item{content}{Tab content as a list.}

\item{names}{Names for tabs (defaults to names(content)).}

\item{class}{CSS class (or vector of classes) to be supplied.}

\item{sep}{Separator used when merging content.}
}
\value{
These functions always return an object with parent S3 class
"quarto_object", in addition to a specific S3 class corresponding
to the function (e.g., \code{quarto_section()} objects also possess the
"quarto_section" class). When printed, the object is
rendered to a character vector of length 1 containing the quarto
syntax that inserts an HTML section header into the document.
}
\description{
Define quarto objects for insertion into a document.
Intended to be used inside a quarto document, within a knitr
code chunk with the \code{results: asis} option set.
}
\details{
Additional details...
}
\examples{
# a quarto_section object
sec <- quarto_section("A level-two header", level = 2L)
 
# base::print() displays a summary of the object 
print(sec)

# knitr::knit_print() displays the rendered quarto syntax
knitr::knit_print(sec) 

# a quarto_span object
spn <- quarto_span("This is underlined", class = "underline")

print(spn)

knitr::knit_print(spn)

# a quarto_div object 
div <- quarto_div("This is a callout note", class = "callout-note")

print(div)

knitr::knit_print(div)

# a quarto_tabset object
tbs <- quarto_tabset(list(tab1 = 1:10, tab2 = "hello"), level = 3L)

print(tbs)

knitr::knit_print(tbs)

# a quarto_markdown object
mkd <- quarto_markdown(list("- a markdown", "- list"), sep = "\n")

print(mkd)

knitr::knit_print(mkd)

# a quarto_group object
grp <- quarto_group(list(
  quarto_div("This is a callout note", class = "callout-note"),
  quarto_div("This is a callout tip", class = "callout-tip")
))

print(grp)

knitr::knit_print(grp)
}

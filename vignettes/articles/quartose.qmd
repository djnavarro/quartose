---
title: "quartose"
vignette: >
  %\VignetteIndexEntry{quartose}
  %\VignetteEngine{quarto::html}
  %\VignetteEncoding{UTF-8}
---

```{r, include = FALSE}
knitr::opts_chunk$set(
  collapse = TRUE,
  comment = "#>"
)
```


```{r, include = FALSE}
knitr::opts_chunk$set(
  collapse = TRUE,
  comment = "#>"
)
```

```{r}
#| label: packages
#| message: false
library(knitr)
library(dplyr)
library(purrr)
library(ggplot2)
library(quartose)
```

The package was originally designed to support automatic tabsets (e.g., writing several plots, one per tab), and to my mind this is the most practical feature of quartose. However, pkgdown has limited support for quarto, so it is difficult to illustrate in this document. Instead, I'll start by illustrating some of the simpler features. You  can use `quarto_span()` to supply CSS classes to sections of text:

```{r}
#| label: span-2
#| results: asis
quarto_span(content = "this is highlighted", class = "mark")
```

If we print this object without the `results: asis` tag, you can see what actually gets written into the document:

```{r}
#| label: span-1
quarto_span(content = "this is highlighted", class = "mark")
```

On its own this isn't entirely useful, but starts to become rather more practical if you wrap multiple `quarto_span()` sections within a `quarto_div()` object.

```{r}
#| label: div-span-1
#| results: asis
quarto_div(list(
  quarto_span("As a simple illustration, you could write a paragraph that "),
  quarto_span("highlighted some sections for emphasis ", class = "mark"),
  quarto_span("but left other sections unmarked. "),
  quarto_span("Some things could be underlined too. ", class = "underline"),
  quarto_span("You get the idea, hopefully!")
))
```

Again for illustrative purposes, we can remove the `results: asis` option to see what's happening under the hood:

```{r}
#| label: div-span-2
quarto_div(list(
  quarto_span("As a simple illustration, you could write a paragraph that "),
  quarto_span("highlighted some sections for emphasis ", class = "mark"),
  quarto_span("but left other sections unmarked. "),
  quarto_span("Some things could be underlined too. ", class = "underline"),
  quarto_span("You get the idea, hopefully!")
))
```

The same idea can be used to generate the quarto syntax to insert section headers:

```{r}
#| label: section-1
quarto_section("A level 3 heading", level = 3)
```

If the code here included the `results: asis` chunk option this would insert a heading into the document. Similarly, there are functions like `quarto_markdown()` that you can use to pass plain markdown:

```{r}
#| label: raw-1
#| results: asis
quarto_markdown(
  content = c(
    "- this ends up being",
    "- a markdown list", 
    "- with **formatting**"
  ),
  sep = "\n"
)
```


Unfortunately for this vignette, the limitations of pkgdown/quarto integration mean that some of the more fun things you can do with quartose are hard to illustrate here. In a regular quarto project, you could create callout boxes and margin text by defining a `quarto_div()` with the appropriate CSS classes. If I try that here, however, it doesn't quite work:

```{r}
#| label: div-4
#| results: asis
quarto_div(
  content = "This would normally be a callout note.",
  class = "callout-note"
)

```

Similarly, because tabsets aren't a supported feature in pkgdown, I can't easily show what a `quarto_tabset()` looks like in this document. I can show you the quarto syntax that gets written to the document...

```{r}
#| label: tabs-and-headers-2
cls <- unique(mpg$class)
dat <- map(cls, \(cl) filter(mpg, class == cl))
quarto_tabset(
  content = map(dat, head), 
  names = cls, 
  title = "Data", 
  level = 4
)
```

...but I'll concede that's not the most helpful illustration. To that end, instead of trying to work around the limitations within pkgdown, it is probably easier to write a blog post at [blog.djnavarro.net](https://blog.djnavarro.net) showing how it works. 

More on that to come, I suppose :)


[{"path":"https://quartose.djnavarro.net/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 quartose authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://quartose.djnavarro.net/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Danielle Navarro. Author, maintainer.","code":""},{"path":"https://quartose.djnavarro.net/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Navarro D (2025). quartose: Syntactic Sugar Quarto. R package version 0.0.0.9000, https://github.com/djnavarro/quartose.","code":"@Manual{,   title = {quartose: Syntactic Sugar for Quarto},   author = {Danielle Navarro},   year = {2025},   note = {R package version 0.0.0.9000},   url = {https://github.com/djnavarro/quartose}, }"},{"path":"https://quartose.djnavarro.net/index.html","id":"quartose","dir":"","previous_headings":"","what":"Syntactic Sugar for Quarto","title":"Syntactic Sugar for Quarto","text":"analyzing data sets R, often convenient wrap analysis within quarto document reporting purposes: containing analysis components within single easy--navigate HTML document generally kindness reader. One consequence , however, sometimes find wanting write code within R code chunk generate parts quarto document . instance, iterating many analyses within single R chunk, might want chunk generate quarto section headers, tabsets . possible knitr engine (evaluates R code chunks) allows generate “asis” output later captured quarto parser; output formatted look like correct quarto syntax, captured translated appropriate HTML. purpose quartose package provide helper functions make task little easier. reason writing conceptually straightforward generate quarto syntax within R, practical issues juggling knitr, quarto, R want resulting document look clean. ’s wrote quartose : want nice, clean outputs get take care little nuances, also don’t want add lots tiresome formatting code analysis documents. decided write small package handles , never think .","code":""},{"path":"https://quartose.djnavarro.net/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Syntactic Sugar for Quarto","text":"can install development version quartose GitHub :","code":"# install.packages(\"pak\") pak::pak(\"djnavarro/quartose\")"},{"path":"https://quartose.djnavarro.net/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Syntactic Sugar for Quarto","text":"basic example shows solve common problem:","code":"library(quartose)  # define a quarto tabset tabs <- quarto_tabset(   content = list(tab1 = 1:5, tab2 = \"hello\"),    title = \"My tabs\",    level = 2 )  # base::print() outputs a simple summary print(tabs) #> <quarto_tabset> #> • content: <list> #> • title: My tabs #> • names: tab1 tab2 #> • level: 2  # knitr::knit_print() outputs quarto syntax knitr::knit_print(tabs) #>  #>  #> ## My tabs #>  #>   #>  #>  #> ::: {.panel-tabset} #>  #>   #>  #>  #> ### tab1 #>  #>   #> <pre>  #> [1] 1 2 3 4 5  #> <\/pre>  #>  #>  #> ### tab2 #>  #>   #> <pre>  #> [1] \"hello\"  #> <\/pre>  #>  #>  #> :::  #>  #>"},{"path":"https://quartose.djnavarro.net/reference/quarto_format.html","id":null,"dir":"Reference","previous_headings":"","what":"Format a quarto object — quarto_format","title":"Format a quarto object — quarto_format","text":"Creates formatted representation quarto object form suitable printing. calling knitr::knit_print() quarto object, relevant format() method called first, formatted version printed document. Note base print() method quarto objects call format().","code":""},{"path":"https://quartose.djnavarro.net/reference/quarto_format.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format a quarto object — quarto_format","text":"","code":"# S3 method for class 'quarto_section' format(x, ...)  # S3 method for class 'quarto_tabset' format(x, ...)  # S3 method for class 'quarto_div' format(x, ...)  # S3 method for class 'quarto_span' format(x, ...)  # S3 method for class 'quarto_markdown' format(x, ...)  # S3 method for class 'quarto_group' format(x, ...)"},{"path":"https://quartose.djnavarro.net/reference/quarto_format.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format a quarto object — quarto_format","text":"x quarto object. ... arguments (ignored).","code":""},{"path":"https://quartose.djnavarro.net/reference/quarto_format.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format a quarto object — quarto_format","text":"formatted quarto object. quarto_section, quarto_span, quarto_markdown objects, formatted output always string (character vector length 1). quarto_tabset quarto_group objects, output always list whose elements either strings plot objects. quarto_div objects, output currently string, may change list output future divs permitted contain plots.","code":""},{"path":"https://quartose.djnavarro.net/reference/quarto_format.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Format a quarto object — quarto_format","text":"intent behind format() methods quarto objects create ready--print representation almost identical printed quarto document knitr::knit_print() called. , formatted version quarto object string list strings, may also include plot objects yet rendered. resulting representation always pretty, though generally fairly readable.","code":""},{"path":"https://quartose.djnavarro.net/reference/quarto_format.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format a quarto object — quarto_format","text":"","code":"# formatted sections, spans and divs ---------------------------------- sec <- quarto_section(\"Header\", level = 2L) spn <- quarto_span(\"Content\", class = \"underline\") div <- quarto_div(\"Content\", class = \"content-margin\")  format(sec) #> [1] \"\\n\\n## Header\\n\\n\"  format(spn) #> [1] \"[Content]{.underline}\"  format(div) #> [1] \"\\n\\n::: {.content-margin}\\n\\n Content \\n\\n:::\\n\\n\"  # formatted tabsets --------------------------------------------------- tbs <- quarto_tabset(   content = list(tab1 = 1:10, tab2 = \"hello\"),   title = \"Header\",   level = 2L )  format(tbs) #> [[1]] #> [1] \"\\n\\n## Header\\n\\n\" #>  #> [[2]] #> [1] \"\\n\\n::: {.panel-tabset}\\n\\n\" #>  #> [[3]] #> [1] \"\\n\\n### tab1\\n\\n\" #>  #> [[4]] #> [1] \"<pre>\" #>  #> [[5]] #> [1] \" [1]  1  2  3  4  5  6  7  8  9 10\" #>  #> [[6]] #> [1] \"<\/pre>\" #>  #> [[7]] #> [1] \"\\n\\n### tab2\\n\\n\" #>  #> [[8]] #> [1] \"<pre>\" #>  #> [[9]] #> [1] \"[1] \\\"hello\\\"\" #>  #> [[10]] #> [1] \"<\/pre>\" #>  #> [[11]] #> [1] \"\\n\\n::: \\n\\n\" #>   # formatted groups and markdown ---------------------------------------  mkd <- quarto_markdown(list(\"- this is a\", \"- markdown list\"), sep = \"\\n\") gps <- quarto_group(list(div, mkd))  format(mkd) #> [1] \"- this is a\\n- markdown list\"  format(gps) #> [[1]] #> [1] \"\\n\\n::: {.content-margin}\\n\\n Content \\n\\n:::\\n\\n\" #>  #> [[2]] #> [1] \"- this is a\\n- markdown list\" #>"},{"path":"https://quartose.djnavarro.net/reference/quarto_object.html","id":null,"dir":"Reference","previous_headings":"","what":"Dynamically generate quarto syntax — quarto_object","title":"Dynamically generate quarto syntax — quarto_object","text":"Define quarto objects insertion document. Intended used inside quarto document, within knitr code chunk results: asis option set.","code":""},{"path":"https://quartose.djnavarro.net/reference/quarto_object.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dynamically generate quarto syntax — quarto_object","text":"","code":"quarto_section(title, level)  quarto_tabset(content, level, title = NULL, names = NULL)  quarto_div(content, class = NULL, sep = \"\")  quarto_span(content, class = NULL, sep = \"\")  quarto_group(content, sep = \"\")  quarto_markdown(content, sep = \"\")"},{"path":"https://quartose.djnavarro.net/reference/quarto_object.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dynamically generate quarto syntax — quarto_object","text":"title Character string specifying text use section title. quarto_section() required argument. quarto_tabset() permitted use title = NULL, case tabset printed without section header . default behavior tabsets. level Numeric header level applied section title tabset names. level argument must whole number 1 6. relevant quarto objects produce section headings, specifically quarto_section() quarto_tabset(). content List character vector containing content included within quarto object. expected format content argument differs slightly depending function used. See \"details\" section information. names Character vector names applied tabs tabset. relevant  quarto_tabset(). names = NULL, names taken names content argument. class Character vector specifying CSS classes applied content. relevant quarto_div() quarto_span(). Defaults class = NULL, case formatted text written document dummy CSS class \"quartose-null\" applied. sep Character string specifying separator used merging content printing document. Defaults sep = \"\" functions.","code":""},{"path":"https://quartose.djnavarro.net/reference/quarto_object.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Dynamically generate quarto syntax — quarto_object","text":"functions always return object parent S3 class \"quarto_object\", addition specific S3 class corresponding function. example, quarto_section() objects also possess \"quarto_section\" class.","code":""},{"path":"https://quartose.djnavarro.net/reference/quarto_object.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Dynamically generate quarto syntax — quarto_object","text":"purpose functions allow user dynamically generate quarto syntax R. used within quarto document allow user generate callouts, margin text, tabsets, section headers, kinds quarto output. current state development functionality somewhat limited, discussed . quarto_*() functions supplied quartose package common design: argument values supplied user stored internally list, minimum processing done time function called. object assigned two S3 classes, \"quarto_object\" shared objects, specific class associated calling function. objects can inspected manipulated programmatically like R objects prior printing. creating quarto object, note quarto_*() functions take content argument, differs slightly depending context: quarto_section() `content“ argument: section headers titles, contain content. quarto_span() `content“ argument must character vector, list. quarto_div() content`` argument permitted character vector list, always stored internally list.  input list, can contain quarto objects.  intended use div contains several spans, limited use case. present, quarto_div()` handle plot objects, functionality may extended permit future. quarto_tabset() content argument must list. list elements can printable R object: element list appear tab. present support graphics objects limited: ggplot2 objects captured rendered knitr::knit_print() called. attempt made (yet!) support kinds graphic objects, passed via content argument function likely fail. quarto_markdown() content argument may character vector list character vectors. function throw error kinds objects passed via content. quarto_group() content argument must list, elements list must quarto objects. intended use function simply collect several quarto objects single group printed time rather sequentially. Creating quarto object defines data structure, perform formatting. Similarly, object printed using print(), formatting applied. brief summary data structure printed console, . However, knitr::knit_print() called, quarto object first passed relevant format() method, responsible constructing appropriate quarto syntax. Calling format() return character vector list. returns list elements either character strings appropriate quarto syntax, plot object yet rendered. formatting applied knitr::knit_print() method pass strings (plots) document. detail formatting printing methods see knit_print.quarto_object() format.quarto_object().","code":""},{"path":"https://quartose.djnavarro.net/reference/quarto_object.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Dynamically generate quarto syntax — quarto_object","text":"","code":"# quarto_section ------------------------------------------------------  sec <- quarto_section(\"A level-two header\", level = 2L)  # quarto objects have two classes, a general purpose class shared by  # all quarto objects, and a class specific to the function class(sec)  #> [1] \"quarto_section\" \"quarto_object\"    # base::print() displays an abstract summary of the object  print(sec) #> <quarto_section> #> • title: A level-two header #> • level: 2  # knitr::knit_print() produces the rendered quarto syntax knitr::knit_print(sec) #>  #>  #> ## A level-two header #>  #>    # quarto_span ---------------------------------------------------------  spn1 <- quarto_span(\"This is plain text\") spn2 <- quarto_span(\"This is underlined text\", class = \"underline\")  print(spn1) #> <quarto_span> #> • content: This is plain text #> • class: #> • sep:  print(spn2) #> <quarto_span> #> • content: This is underlined text #> • class: underline #> • sep:  knitr::knit_print(spn1) #> [This is plain text]{.quartose-null}   knitr::knit_print(spn2) #> [This is underlined text]{.underline}   # quarto_div ----------------------------------------------------------  # quarto_div objects are flexible: they can take a character vector as # the content argument, but can also take lists of other objects; note # that internally the content is always represented as a list div1 <- quarto_div(\"This is a callout note\", class = \"callout-note\") div2 <- quarto_div(   content = list(     quarto_span(content = \"You can wrap multiple spans in a div so that\"),     quarto_span(content = \"some text is highlighted\", class = \"mark\"),     quarto_span(content = \"and some is underlined\", class = \"underline\")   ),   class = c(\"column-margin\", \"callout-tip\"),   sep = \" \" )  print(div1) #> <quarto_div> #> • content: <list> #> • class: callout-note #> • sep:  print(div2) #> <quarto_div> #> • content: <list> #> • class: column-margin callout-tip #> • sep:  knitr::knit_print(div1) #>  #>  #> ::: {.callout-note} #>  #>  This is a callout note  #>  #> ::: #>  #>    knitr::knit_print(div2) #>  #>  #> ::: {.column-margin .callout-tip} #>  #>  [You can wrap multiple spans in a div so that]{.quartose-null} [some text is highlighted]{.mark} [and some is underlined]{.underline}  #>  #> ::: #>  #>    # quarto_tabset -------------------------------------------------------  tbs <- quarto_tabset(list(tab1 = 1:10, tab2 = \"hello\"), level = 3L)  print(tbs) #> <quarto_tabset> #> • content: <list> #> • title: #> • names: tab1 tab2 #> • level: 3  knitr::knit_print(tbs) #>  #>  #> ::: {.panel-tabset} #>  #>   #>  #>  #> ### tab1 #>  #>   #> <pre>  #>  [1]  1  2  3  4  5  6  7  8  9 10  #> <\/pre>  #>  #>  #> ### tab2 #>  #>   #> <pre>  #> [1] \"hello\"  #> <\/pre>  #>  #>  #> :::  #>  #>    # quarto_markdown -----------------------------------------------------  mkd <- quarto_markdown(list(\"- a markdown\", \"- list\"), sep = \"\\n\")  print(mkd) #> <quarto_markdown> #> • content: <list> #> • sep:  knitr::knit_print(mkd) #> - a markdown #> - list   # quarto_group --------------------------------------------------------  grp <- quarto_group(list(   quarto_div(\"This is a callout note\", class = \"callout-note\"),   quarto_div(\"This is a callout tip\", class = \"callout-tip\") ))  print(grp) #> <quarto_group> #> • content: <list> #> • sep:  knitr::knit_print(grp) #>  #>  #> ::: {.callout-note} #>  #>  This is a callout note  #>  #> ::: #>  #>   #>  #>  #> ::: {.callout-tip} #>  #>  This is a callout tip  #>  #> ::: #>  #>"},{"path":"https://quartose.djnavarro.net/reference/quarto_print.html","id":null,"dir":"Reference","previous_headings":"","what":"Print a quarto object — quarto_print","title":"Print a quarto object — quarto_print","text":"Prints quarto object. calling knitr::knit_print() quarto object, relevant format() method called first, formatted version printed document. calling print(), summary object structure printed.","code":""},{"path":"https://quartose.djnavarro.net/reference/quarto_print.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print a quarto object — quarto_print","text":"","code":"# S3 method for class 'quarto_object' knit_print(x, ...)  # S3 method for class 'quarto_object' print(x, ...)"},{"path":"https://quartose.djnavarro.net/reference/quarto_print.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print a quarto object — quarto_print","text":"x quarto object. ... arguments (ignored).","code":""},{"path":"https://quartose.djnavarro.net/reference/quarto_print.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print a quarto object — quarto_print","text":"knitr::knit_print() invisibly returns NULL; print() invisibly returns quarto object .","code":""},{"path":"https://quartose.djnavarro.net/reference/quarto_print.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Print a quarto object — quarto_print","text":"two print methods supplied quarto objects, one base::print() another knitr::knit_print(). regular print method behaves similarly print method: prints summary object R console, invisibly returns object . knitr::knit_print() called quarto object, behavior quite different. object first passed format(), constructs required quarto syntax, object printed document (console, called interactively) using appropriate syntax. case, function invisibly returns NULL.","code":""},{"path":"https://quartose.djnavarro.net/reference/quarto_print.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print a quarto object — quarto_print","text":"","code":"# a quarto_section object sec <- quarto_section(\"A level-two header\", level = 2L)   # base::print() displays a summary of the object  print(sec) #> <quarto_section> #> • title: A level-two header #> • level: 2  # knitr::knit_print() displays the rendered quarto syntax knitr::knit_print(sec)  #>  #>  #> ## A level-two header #>  #>    # a quarto_span object spn <- quarto_span(\"This is underlined\", class = \"underline\")  print(spn) #> <quarto_span> #> • content: This is underlined #> • class: underline #> • sep:  knitr::knit_print(spn) #> [This is underlined]{.underline}"}]
